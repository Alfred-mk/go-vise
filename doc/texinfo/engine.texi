@node engine
@chapter Using vise

Implementers of @code{vise} should interface with the system using the @code{engine} module.

The engine comes in two implementations, one volatile base implemetnation and a subclass that includes persistent state.


@section Modes of operation

The @code{engine}Â module provides three different modes of operation for the engine implementations.


@subsection Manual operation

Directly interaction with an @code{engine.Engine} instance.

The engine is manually initialized, and execution must be explicitly triggered with input every time the VM yields control.

Output flushing must also be operated manually.

The interface is the same for both persistent and volatile operation.


@subsection Synchronous loop

Receives input from a reader and writes into to a writer, and executes the underlying @code{engine.Engine} with given inputs until execution is terminated.

The loop may be either persistent or volatile.

This mode drives the interactive driver execution tool. 


@subsection Asynchronous one-shot

Compatible with e.g. a network socket or HTTP frontend. The @code{engine.RunPersisted} method restores a persisted state and runs one single input until VM yield after which the new state is persisted.

This mode of operation can only be used with persistent state.


@section Configuration

The engine configuration defines the top-level parameters for the execution environment, including maximum output size, default language, execution entry point and more.

Please refer to @code{engine.Config} for details.


@section Sessions

The @code{engine.Config.SessionId} is used to disambiguate the end-user that is interacting with the engine.

For example, in a @abbr{USSD} context, the @code{SessionId} may be the @emph{phone number} of the end-user.


@anchor{execution_context}
@section Execution context

The engine stores the @code{SessionId} aswell as the current chosen @code{lang.Language} in the execution context. This is passed through to the VM operation, and is available for client code, specifically:

@itemize
@item When resolving symbols with @code{LOAD}. (@code{resource.EntryFunc}).
@item When resolving menu symbols (@code{resource.Resource.GetMenu}).
@item When retrieving node templates (@code{resource.Resource.GetTemplate}).
@end itemize
