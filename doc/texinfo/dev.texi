@node dev
@chapter Development


@section Code repository structure

@table @code
@item asm
Assembly parser and compiler.
@item cache
Holds and manages all loaded content.
@item engine
Outermost interface. Orchestrates execution of bytecode against input. 
@item lang
Validation and specification of language context.
@item logging
Logging interface and build tags for loglevels.
@item persist
Interface and reference implementation of `state` and `cache` persistence across asynchronous vm executions.
@item render
Renders menu and templates, and enforces output size constraints.
@item resource
Retrieves data and bytecode from external symbols, and retrieves templates.
@item state
Holds the bytecode buffer, error states and navigation states.
@item vm
Defines instructions, and applies transformations according to the instructions.
@end table


@section Logging

Loglevels are set at compile-time using the following build tags:

@itemize
@item @code{lognone}
@item @code{logerror}
@item @code{logwarn}
@item @code{loginfo}
@item @code{logdebug}
@item @code{logtrace}
@end itemize

Only use @strong{ONE} of these tags.

The default tag is @code{lognone} which disables logging completely.

@code{logging.Logger} defines the logging interface. It is faintly inspired by the experimental @url{https://pkg.go.dev/golang.org/x/exp/slog) package, in that it differentiates explicit context logging, slog}.


@section Tools

Located in the @file{dev/} directory of the source code repository. 


@subsection Test data generation

@example
go run ./dev/gendata/ <directory>
@end example

Outputs bytecodes and templates for test data scenarios used in `engine` unit tests.


@subsection Interactive runner

@example
go run ./dev/interactive [-d <data_directory>] [--root <root_symbol>] [--session-id <session_id>] [--persist]
@end example

Creates a new interactive session using @code{engine.DefaultEngine}, starting execution at symbol @code{root_symbol}

@code{data_directory} points to a directory where templates and bytecode is to be found (in the same format as generated by @file{dev/gendata}).

If @code{data_directory} is not set, current directory will be used.

if @code{root_symbol} is not set, the symbol @code{root} will be used.

if @code{session_id} is set, mutable data will be stored and retrieved keyed by the given identifer (if implemented).

If @code{persist} is set, the execution state will be persisted across sessions.


@subsection Assembler

@example
go run ./dev/asm <assembly_file>
@end example

Will output bytecode on STDOUT generated from a valid assembly file.


@subsection Disassembler

@example
go run ./dev/disasm/ <binary_file>
@end example

Will list all the instructions on STDOUT from a valid binary file.


@subsection Interactive case examples

Found in @file{examples/}.

Be sure to @code{make examples} before running them.

Can be run with:

@example
go run ./examples/<case> [...]
@end example

except helloworld which is run as

@example
go run ./dev/interactive -d ./examples/helloworld [...]
@end example

The available options are the same as for the @file{dev/interactive} tool.

Contents of the case directory:

@table @file
@item *.vis
assembly code.
@item *.bin
bytecode for each node symbol (only available after make).
@item *.txt.orig
default contents of a single data entry.
@item *.txt
current contents of a single data entry (only available after make).
@end table


@section Assembly examples

See @file{testdata/*.vis}


@section Bytecode example

Currently the following rules apply for encoding in version @code{0}:

@itemize
@item A code instruction is a @emph{big-endian} 2-byte value. See @file{vm/opcodes.go} for valid opcode values.
@item @code{symbol} value is encoded as @emph{one byte} of string length, after which the  byte-value of the string follows.
@item @code{size} value is encoded as @emph{one byte} of numeric length, after which the @emph{big-endian} byte-value of the integer follows.
@item @code{signal} value is encoded as @emph{one byte} of byte length, after which a byte-array representing the defined signal follows.
@end itemize


@subsection Example

(Minimal, WIP)

@verbatim
000a 03666f6f 05746f666f6f    # MOUT tofoo foo  - display a menu entry for choice "foo", described by "to foo"
0008 03666f6f 03626172        # INCMP bar foo   - move to node "bar" if input is "FOO"
0001 0461696565 01 01         # CATCH aiee 1 1  - move to node "aiee" (and immediately halt) if input match flag (1) is not set (1)
0003 04616263 020104          # LOAD abc 260    - execute code symbol "abc" with a result size limit of 260 (2 byte BE integer, 0x0104)
0003 04646566 00              # LOAD def 0      - execute code symbol "abc" with no size limit (sink)
0005 04616263                 # MAP abc         - make "abc" available for renderer
0007                          # HALT            - stop execution (require new input to continue)
0006 0461313233               # MOVE a123       - move to node "a123" (regardless of input)
0007                          # HALT            - stop execution
@end verbatim
